create table public.expenses (
  id uuid not null default gen_random_uuid (),
  expense_date date not null default CURRENT_DATE,
  expense_time time without time zone not null default CURRENT_TIME,
  category text not null,
  subcategory text null,
  description text not null,
  amount numeric(10, 2) not null,
  payment_method text not null default 'Cash'::text,
  vendor_name text null,
  reference_number text null,
  is_raw_material boolean null default false,
  inventory_item_id uuid null,
  quantity_used numeric(10, 3) null,
  unit text null,
  gst_amount numeric(10, 2) null default 0,
  total_amount numeric(10, 2) not null,
  notes text null,
  receipt_image_url text null,
  created_by uuid null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  expense_title text null,
  constraint expenses_pkey primary key (id),
  constraint expenses_inventory_item_id_fkey foreign KEY (inventory_item_id) references inventory (id)
) TABLESPACE pg_default;

create index IF not exists idx_expenses_date on public.expenses using btree (expense_date) TABLESPACE pg_default;

create index IF not exists idx_expenses_category on public.expenses using btree (category) TABLESPACE pg_default;

create index IF not exists idx_expenses_is_raw_material on public.expenses using btree (is_raw_material) TABLESPACE pg_default;

create index IF not exists idx_expenses_inventory_item on public.expenses using btree (inventory_item_id) TABLESPACE pg_default;

create trigger update_expenses_updated_at BEFORE
update on expenses for EACH row
execute FUNCTION update_updated_at_column ();